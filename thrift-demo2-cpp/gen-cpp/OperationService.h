/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef OperationService_H
#define OperationService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Operation_types.h"

namespace Chad {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class OperationServiceIf {
 public:
  virtual ~OperationServiceIf() {}
  virtual bool Ping() = 0;
  virtual void Set(std::string& _return, const std::map<std::string, std::string> & m) = 0;
  virtual void Get(std::map<std::string, std::string> & _return, const std::vector<std::string> & l) = 0;
  virtual void Op(IOArgs& _return, const IOArgs& io_args) = 0;
};

class OperationServiceIfFactory {
 public:
  typedef OperationServiceIf Handler;

  virtual ~OperationServiceIfFactory() {}

  virtual OperationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(OperationServiceIf* /* handler */) = 0;
};

class OperationServiceIfSingletonFactory : virtual public OperationServiceIfFactory {
 public:
  OperationServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<OperationServiceIf>& iface) : iface_(iface) {}
  virtual ~OperationServiceIfSingletonFactory() {}

  virtual OperationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(OperationServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<OperationServiceIf> iface_;
};

class OperationServiceNull : virtual public OperationServiceIf {
 public:
  virtual ~OperationServiceNull() {}
  bool Ping() {
    bool _return = false;
    return _return;
  }
  void Set(std::string& /* _return */, const std::map<std::string, std::string> & /* m */) {
    return;
  }
  void Get(std::map<std::string, std::string> & /* _return */, const std::vector<std::string> & /* l */) {
    return;
  }
  void Op(IOArgs& /* _return */, const IOArgs& /* io_args */) {
    return;
  }
};


class OperationService_Ping_args {
 public:

  OperationService_Ping_args(const OperationService_Ping_args&);
  OperationService_Ping_args& operator=(const OperationService_Ping_args&);
  OperationService_Ping_args() {
  }

  virtual ~OperationService_Ping_args() throw();

  bool operator == (const OperationService_Ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const OperationService_Ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationService_Ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OperationService_Ping_pargs {
 public:


  virtual ~OperationService_Ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OperationService_Ping_result__isset {
  _OperationService_Ping_result__isset() : success(false) {}
  bool success :1;
} _OperationService_Ping_result__isset;

class OperationService_Ping_result {
 public:

  OperationService_Ping_result(const OperationService_Ping_result&);
  OperationService_Ping_result& operator=(const OperationService_Ping_result&);
  OperationService_Ping_result() : success(0) {
  }

  virtual ~OperationService_Ping_result() throw();
  bool success;

  _OperationService_Ping_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const OperationService_Ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OperationService_Ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationService_Ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OperationService_Ping_presult__isset {
  _OperationService_Ping_presult__isset() : success(false) {}
  bool success :1;
} _OperationService_Ping_presult__isset;

class OperationService_Ping_presult {
 public:


  virtual ~OperationService_Ping_presult() throw();
  bool* success;

  _OperationService_Ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OperationService_Set_args__isset {
  _OperationService_Set_args__isset() : m(false) {}
  bool m :1;
} _OperationService_Set_args__isset;

class OperationService_Set_args {
 public:

  OperationService_Set_args(const OperationService_Set_args&);
  OperationService_Set_args& operator=(const OperationService_Set_args&);
  OperationService_Set_args() {
  }

  virtual ~OperationService_Set_args() throw();
  std::map<std::string, std::string>  m;

  _OperationService_Set_args__isset __isset;

  void __set_m(const std::map<std::string, std::string> & val);

  bool operator == (const OperationService_Set_args & rhs) const
  {
    if (!(m == rhs.m))
      return false;
    return true;
  }
  bool operator != (const OperationService_Set_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationService_Set_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OperationService_Set_pargs {
 public:


  virtual ~OperationService_Set_pargs() throw();
  const std::map<std::string, std::string> * m;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OperationService_Set_result__isset {
  _OperationService_Set_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _OperationService_Set_result__isset;

class OperationService_Set_result {
 public:

  OperationService_Set_result(const OperationService_Set_result&);
  OperationService_Set_result& operator=(const OperationService_Set_result&);
  OperationService_Set_result() : success() {
  }

  virtual ~OperationService_Set_result() throw();
  std::string success;
  InvalidOperation ouch;

  _OperationService_Set_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const OperationService_Set_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const OperationService_Set_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationService_Set_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OperationService_Set_presult__isset {
  _OperationService_Set_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _OperationService_Set_presult__isset;

class OperationService_Set_presult {
 public:


  virtual ~OperationService_Set_presult() throw();
  std::string* success;
  InvalidOperation ouch;

  _OperationService_Set_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OperationService_Get_args__isset {
  _OperationService_Get_args__isset() : l(false) {}
  bool l :1;
} _OperationService_Get_args__isset;

class OperationService_Get_args {
 public:

  OperationService_Get_args(const OperationService_Get_args&);
  OperationService_Get_args& operator=(const OperationService_Get_args&);
  OperationService_Get_args() {
  }

  virtual ~OperationService_Get_args() throw();
  std::vector<std::string>  l;

  _OperationService_Get_args__isset __isset;

  void __set_l(const std::vector<std::string> & val);

  bool operator == (const OperationService_Get_args & rhs) const
  {
    if (!(l == rhs.l))
      return false;
    return true;
  }
  bool operator != (const OperationService_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationService_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OperationService_Get_pargs {
 public:


  virtual ~OperationService_Get_pargs() throw();
  const std::vector<std::string> * l;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OperationService_Get_result__isset {
  _OperationService_Get_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _OperationService_Get_result__isset;

class OperationService_Get_result {
 public:

  OperationService_Get_result(const OperationService_Get_result&);
  OperationService_Get_result& operator=(const OperationService_Get_result&);
  OperationService_Get_result() {
  }

  virtual ~OperationService_Get_result() throw();
  std::map<std::string, std::string>  success;
  InvalidOperation ouch;

  _OperationService_Get_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const OperationService_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const OperationService_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationService_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OperationService_Get_presult__isset {
  _OperationService_Get_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _OperationService_Get_presult__isset;

class OperationService_Get_presult {
 public:


  virtual ~OperationService_Get_presult() throw();
  std::map<std::string, std::string> * success;
  InvalidOperation ouch;

  _OperationService_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OperationService_Op_args__isset {
  _OperationService_Op_args__isset() : io_args(false) {}
  bool io_args :1;
} _OperationService_Op_args__isset;

class OperationService_Op_args {
 public:

  OperationService_Op_args(const OperationService_Op_args&);
  OperationService_Op_args& operator=(const OperationService_Op_args&);
  OperationService_Op_args() {
  }

  virtual ~OperationService_Op_args() throw();
  IOArgs io_args;

  _OperationService_Op_args__isset __isset;

  void __set_io_args(const IOArgs& val);

  bool operator == (const OperationService_Op_args & rhs) const
  {
    if (!(io_args == rhs.io_args))
      return false;
    return true;
  }
  bool operator != (const OperationService_Op_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationService_Op_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OperationService_Op_pargs {
 public:


  virtual ~OperationService_Op_pargs() throw();
  const IOArgs* io_args;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OperationService_Op_result__isset {
  _OperationService_Op_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _OperationService_Op_result__isset;

class OperationService_Op_result {
 public:

  OperationService_Op_result(const OperationService_Op_result&);
  OperationService_Op_result& operator=(const OperationService_Op_result&);
  OperationService_Op_result() {
  }

  virtual ~OperationService_Op_result() throw();
  IOArgs success;
  InvalidOperation ouch;

  _OperationService_Op_result__isset __isset;

  void __set_success(const IOArgs& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const OperationService_Op_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const OperationService_Op_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationService_Op_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OperationService_Op_presult__isset {
  _OperationService_Op_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _OperationService_Op_presult__isset;

class OperationService_Op_presult {
 public:


  virtual ~OperationService_Op_presult() throw();
  IOArgs* success;
  InvalidOperation ouch;

  _OperationService_Op_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class OperationServiceClient : virtual public OperationServiceIf {
 public:
  OperationServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  OperationServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool Ping();
  void send_Ping();
  bool recv_Ping();
  void Set(std::string& _return, const std::map<std::string, std::string> & m);
  void send_Set(const std::map<std::string, std::string> & m);
  void recv_Set(std::string& _return);
  void Get(std::map<std::string, std::string> & _return, const std::vector<std::string> & l);
  void send_Get(const std::vector<std::string> & l);
  void recv_Get(std::map<std::string, std::string> & _return);
  void Op(IOArgs& _return, const IOArgs& io_args);
  void send_Op(const IOArgs& io_args);
  void recv_Op(IOArgs& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class OperationServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<OperationServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (OperationServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Op(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  OperationServiceProcessor(::apache::thrift::stdcxx::shared_ptr<OperationServiceIf> iface) :
    iface_(iface) {
    processMap_["Ping"] = &OperationServiceProcessor::process_Ping;
    processMap_["Set"] = &OperationServiceProcessor::process_Set;
    processMap_["Get"] = &OperationServiceProcessor::process_Get;
    processMap_["Op"] = &OperationServiceProcessor::process_Op;
  }

  virtual ~OperationServiceProcessor() {}
};

class OperationServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  OperationServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< OperationServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< OperationServiceIfFactory > handlerFactory_;
};

class OperationServiceMultiface : virtual public OperationServiceIf {
 public:
  OperationServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<OperationServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~OperationServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<OperationServiceIf> > ifaces_;
  OperationServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<OperationServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool Ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Ping();
    }
    return ifaces_[i]->Ping();
  }

  void Set(std::string& _return, const std::map<std::string, std::string> & m) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Set(_return, m);
    }
    ifaces_[i]->Set(_return, m);
    return;
  }

  void Get(std::map<std::string, std::string> & _return, const std::vector<std::string> & l) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get(_return, l);
    }
    ifaces_[i]->Get(_return, l);
    return;
  }

  void Op(IOArgs& _return, const IOArgs& io_args) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Op(_return, io_args);
    }
    ifaces_[i]->Op(_return, io_args);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class OperationServiceConcurrentClient : virtual public OperationServiceIf {
 public:
  OperationServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  OperationServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool Ping();
  int32_t send_Ping();
  bool recv_Ping(const int32_t seqid);
  void Set(std::string& _return, const std::map<std::string, std::string> & m);
  int32_t send_Set(const std::map<std::string, std::string> & m);
  void recv_Set(std::string& _return, const int32_t seqid);
  void Get(std::map<std::string, std::string> & _return, const std::vector<std::string> & l);
  int32_t send_Get(const std::vector<std::string> & l);
  void recv_Get(std::map<std::string, std::string> & _return, const int32_t seqid);
  void Op(IOArgs& _return, const IOArgs& io_args);
  int32_t send_Op(const IOArgs& io_args);
  void recv_Op(IOArgs& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
